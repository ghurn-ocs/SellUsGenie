/**
 * Visual Page Builder - Standalone Page
 * Comprehensive page builder with navigation and linking system
 */
import React, { useState, useEffect } from 'react';
import { 
  ArrowLeft, 
  Plus, 
  Eye, 
  Settings, 
  Save, 
  Globe, 
  Link2,
  Trash2,
  Copy,
  Layout,
  File,
  FileText,
  Phone,
  Shield,
  Users,
  ShoppingBag,
  Home,
  Edit3,
  ExternalLink,
  RefreshCw,
  Image,
  Upload,
  X
} from 'lucide-react';
import { EnhancedPageBuilder } from '../pageBuilder/editor/EnhancedPageBuilder';
import { SupabasePageRepository } from '../pageBuilder/data/SupabasePageRepository';
import { CustomizationPanel } from '../components/storefront/CustomizationPanel';
import { PolicySettings } from '../components/settings/PolicySettings';
import { HeaderFooterEditor } from '../pageBuilder/components/HeaderFooterEditor';
import type { PageDocument, PageRepository } from '../pageBuilder/types';
// Navigation will be handled automatically by the storefront
import type { User } from '../pageBuilder/types';
import { DndContext, closestCenter } from '@dnd-kit/core';
import { useAuth } from '../contexts/AuthContext';
import { useStore } from '../contexts/StoreContext';
import { supabase } from '../lib/supabase';
import { SystemPageModal } from '../pageBuilder/components/SystemPageModal';
import { ProvisioningModal } from '../pageBuilder/components/ProvisioningModal';
import { SystemPagesFixModal } from '../pageBuilder/components/SystemPagesFixModal';
import { checkProvisioningStatus, provisionCurrentStore } from '../utils/provisionCurrentStore';
import { cleanupDuplicateHomePagesForStore } from '../utils/cleanupDuplicateHomePages';
import { recreateAboutUsPageByEmail } from '../utils/recreateAboutUsPage';
import { recreateMissingSystemPages, publishCoreSystemPages } from '../utils/updateSystemPagesSimple';
// Import and register all widgets
import '../pageBuilder/widgets/text/index';
import '../pageBuilder/widgets/button/index';
import '../pageBuilder/widgets/image/index';
import '../pageBuilder/widgets/spacer/index';
import '../pageBuilder/widgets/gallery/index';
import '../pageBuilder/widgets/form/index';
import '../pageBuilder/widgets/carousel/index';
import '../pageBuilder/widgets/product-listing/index';
import '../pageBuilder/widgets/subscribe/index';
import '../pageBuilder/widgets/featured-products/index';
interface Page {
  id: string;
  name: string;
  slug: string;
  template: string;
  status: 'draft' | 'published';
  createdAt: string;
  isHomePage?: boolean;
  isSystemPage?: boolean;
  systemPageType?: 'header' | 'footer' | 'about' | 'privacy' | 'terms' | 'contact' | 'returns';
  readOnly?: boolean;
}
interface Template {
  id: string;
  name: string;
  description: string;
  icon: React.ComponentType<any>;
  category: string;
  slug?: string;
}
const templates: Template[] = [
  // Basic Pages
  { id: 'homepage', name: 'Home Page', description: 'Main landing page', icon: Home, category: 'Basic' },
  { id: 'about', name: 'About Us', description: 'Company information', icon: Users, category: 'Basic' },
  { id: 'contact', name: 'Contact Us', description: 'Contact form and info', icon: Phone, category: 'Basic' },
  { id: 'blank', name: 'Blank Page', description: 'Start from scratch', icon: File, category: 'Basic' },
  // Commerce Pages
  { id: 'products', name: 'Products & Services', description: 'Product showcase', icon: ShoppingBag, category: 'Commerce', slug: '/products' },
  { id: 'ecommerce-store', name: 'Online Store', description: 'E-commerce product catalog', icon: ShoppingBag, category: 'Commerce' },
  // Legal Pages
  { id: 'privacy', name: 'Privacy Policy', description: 'Privacy policy page', icon: Shield, category: 'Legal' },
  { id: 'terms', name: 'Terms of Service', description: 'Terms and conditions', icon: FileText, category: 'Legal' },
  // Professional Pages
  { id: 'portfolio', name: 'Portfolio', description: 'Creative work showcase', icon: Layout, category: 'Professional' },
  { id: 'blog', name: 'Blog', description: 'Blog and articles', icon: FileText, category: 'Professional' },
  { id: 'testimonials', name: 'Testimonials', description: 'Customer reviews', icon: Users, category: 'Professional' },
  { id: 'team', name: 'Our Team', description: 'Team member profiles', icon: Users, category: 'Professional' },
  // Business Specific
  { id: 'services', name: 'Services', description: 'Service offerings', icon: Settings, category: 'Business' },
  { id: 'pricing', name: 'Pricing', description: 'Pricing plans', icon: ShoppingBag, category: 'Business' },
  { id: 'faq', name: 'FAQ', description: 'Frequently asked questions', icon: FileText, category: 'Business' },
  { id: 'case-studies', name: 'Case Studies', description: 'Success stories', icon: FileText, category: 'Business' }
];
interface HeaderFooterEditorWrapperProps {
  page: any; // Page from the pages list
  pageRepository: PageRepository;
  onPageUpdate: (page: PageDocument) => void;
}
const HeaderFooterEditorWrapper: React.FC<HeaderFooterEditorWrapperProps> = ({ 
  page, 
  pageRepository, 
  onPageUpdate 
}) => {
  const { currentStore } = useStore();
  const [fullPage, setFullPage] = useState<PageDocument | null>(null);
  const [settings, setSettings] = useState({
    backgroundColor: '#1E1E1E',
    textColor: '#FFFFFF', 
    linkColor: '#9B51E0',
    linkHoverColor: '#8B45D0',
    logoPosition: 'left' as 'left' | 'center',
    showLogo: true,
    useStoreLogo: true,
    showTagline: false,
    buttonStyle: 'rounded' as 'round' | 'square' | 'rounded',
    navLinkStyle: 'text' as 'bordered' | 'text',
    horizontalSpacing: 'standard' as 'thin' | 'standard' | 'expanded',
    tagline: '',
    footerText: '© 2024 Your Store. All rights reserved.',
    showSocialLinks: false
  });
  const [isSaving, setIsSaving] = useState(false);
  // Load the full page document when component mounts
  useEffect(() => {
    const loadPage = async () => {
      try {
        const pageDoc = await pageRepository.getPage(page.id);
        if (pageDoc) {
          setFullPage(pageDoc);
          // Extract settings from page document (themeOverrides or colorPalette)
          const theme = pageDoc.themeOverrides || {};
          const palette = pageDoc.colorPalette?.colors || {};
          setSettings({
            backgroundColor: theme.backgroundColor || palette.headerBackground || '#1E1E1E',
            textColor: theme.textColor || palette.headerText || '#FFFFFF',
            linkColor: theme.linkColor || palette.primary || '#9B51E0', 
            linkHoverColor: theme.linkHoverColor || palette.primaryHover || '#8B45D0',
            logoPosition: theme.logoPosition || 'left',
            showLogo: theme.showLogo ?? true,
            useStoreLogo: theme.useStoreLogo ?? true, // Added missing field
            showTagline: theme.showTagline ?? false,
            buttonStyle: theme.buttonStyle || 'rounded',
            navLinkStyle: theme.navLinkStyle || 'text',
            horizontalSpacing: theme.horizontalSpacing || 'standard',
            tagline: theme.tagline || '',
            footerText: theme.footerText || '© 2024 Your Store. All rights reserved.',
            showSocialLinks: theme.showSocialLinks ?? false
          });
        }
      } catch (error) {
      }
    };
    loadPage();
  }, [page.id, pageRepository]);
  const handleSettingsChange = (newSettings: typeof settings) => {
    setSettings(newSettings);
  };
  const handleSave = async () => {
    if (!fullPage) return;
    setIsSaving(true);
    try {
      // Update the page document with new settings
      const updatedPage: PageDocument = {
        ...fullPage,
        themeOverrides: {
          ...fullPage.themeOverrides,
          backgroundColor: settings.backgroundColor,
          textColor: settings.textColor,
          linkColor: settings.linkColor,
          linkHoverColor: settings.linkHoverColor,
          logoPosition: settings.logoPosition,
          showLogo: settings.showLogo,
          useStoreLogo: settings.useStoreLogo, // Added missing field
          showTagline: settings.showTagline,
          buttonStyle: settings.buttonStyle,
          navLinkStyle: settings.navLinkStyle, // Add the missing navigation link style
          horizontalSpacing: settings.horizontalSpacing,
          tagline: settings.tagline,
          footerText: settings.footerText,
          showSocialLinks: settings.showSocialLinks
        },
        status: (page.systemPageType === 'header' || page.systemPageType === 'footer') ? 'published' : fullPage.status,
        publishedAt: (page.systemPageType === 'header' || page.systemPageType === 'footer') ? new Date().toISOString() : fullPage.publishedAt,
        updatedAt: new Date().toISOString()
      };
      // Save the page first
      await pageRepository.saveDraft(updatedPage);
      // Header and Footer pages should always be published, regular pages can be drafts
      if (page.systemPageType === 'header' || page.systemPageType === 'footer') {
        await pageRepository.publish(updatedPage.id);
      }
      setFullPage(updatedPage);
      onPageUpdate(updatedPage);
    } catch (error: any) {
      // Show user-friendly error messages
      if (error?.code === 'P0001' && error?.message?.includes('more than')) {
        alert('⚠️ Cannot save changes: Your store has reached the page limit. Please delete some pages first or upgrade your plan to save Header/Footer customizations.');
      } else {
        alert('❌ Failed to save Header/Footer settings. Please try again or contact support if the problem persists.');
      }
    } finally {
      setIsSaving(false);
    }
  };
  if (!fullPage) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
        <span className="ml-3 text-gray-600">Loading {page.systemPageType} editor...</span>
      </div>
    );
  }
  return (
    <HeaderFooterEditor
      type={page.systemPageType}
      settings={settings}
      onSettingsChange={handleSettingsChange}
      onSave={handleSave}
      isSaving={isSaving}
      storeLogoUrl={currentStore?.store_logo_url}
    />
  );
};
interface EnhancedPageBuilderWrapperProps {
  pageId: string;
  pageName: string;
  pageSlug: string;
}
const EnhancedPageBuilderWrapper: React.FC<EnhancedPageBuilderWrapperProps> = ({ 
  pageId
}) => {
  const { user: authUser } = useAuth();
  const { currentStore } = useStore();
  // Convert auth user to page builder user format
  const user: User = {
    id: authUser?.id || 'anonymous',
    email: authUser?.email || 'anonymous@example.com',
    role: 'owner',
    storeId: currentStore?.id || 'default-store'
  };
  const repository = new SupabasePageRepository(user.storeId);
  const handleSave = (doc: any) => {
  };
  const handlePublish = (doc: any) => {
  };
  const handleError = (error: Error) => {
  };
  const handleEditSystemPage = (page: any) => {
    // Navigate to edit the system page - this could navigate to the main page builder
    // or handle system page editing in a special way
  };
  return (
    <DndContext collisionDetection={closestCenter}>
      <div className="h-full bg-white">
        <EnhancedPageBuilder
          pageId={pageId}
          user={user}
          repository={repository}
          storeId={user.storeId}
          onSave={handleSave}
          onPublish={handlePublish}
          onError={handleError}
          onEditSystemPage={handleEditSystemPage}
        />
      </div>
    </DndContext>
  );
};
export const VisualPageBuilder: React.FC = () => {
  const { user: authUser } = useAuth();
  const { currentStore, refreshStores } = useStore();
  const [pages, setPages] = useState<Page[]>([]);
  const [selectedPageId, setSelectedPageId] = useState<string>('');
  const [showTemplateSelector, setShowTemplateSelector] = useState(false);
  const [view, setView] = useState<'pages' | 'contents' | 'policies' | 'editor'>('pages');
  const [isLoading, setIsLoading] = useState(true);
  const [repository, setRepository] = useState<SupabasePageRepository | null>(null);
  const [initError, setInitError] = useState<string | null>(null);
  const [showSystemPageModal, setShowSystemPageModal] = useState(false);
  const [systemPageInfo, setSystemPageInfo] = useState<{ type: 'about' | 'privacy' | 'terms' | 'returns'; name: string } | null>(null);
  const [showProvisioningModal, setShowProvisioningModal] = useState(false);
  const [provisioningStatus, setProvisioningStatus] = useState<{ needsPages: boolean; needsPolicies: boolean; pageCount: number } | null>(null);
  const [showSystemPagesFixModal, setShowSystemPagesFixModal] = useState(false);
  const [customizations, setCustomizations] = useState(null);
  const [isSavingCustomizations, setIsSavingCustomizations] = useState(false);
  const [isLoadingCustomizations, setIsLoadingCustomizations] = useState(false);
  const [refreshLoading, setRefreshLoading] = useState(false);
  const [logoUploading, setLogoUploading] = useState(false);
  const [logoFile, setLogoFile] = useState<File | null>(null);
  const [uploadedLogoUrl, setUploadedLogoUrl] = useState<string | null>(null);
  const selectedPage = pages.find(p => p.id === selectedPageId);
  const pageCount = pages.length;
  const maxPages = 12;
  // Initialize uploaded logo URL from current store
  useEffect(() => {
    if (currentStore?.store_logo_url) {
      setUploadedLogoUrl(currentStore.store_logo_url);
    } else {
      setUploadedLogoUrl(null);
    }
  }, [currentStore?.store_logo_url]);
  // Initialize repository and load pages
  useEffect(() => {
    const initializeRepository = async () => {
      try {
        setIsLoading(true);
        // Check if we have authentication
        // Use store ID if available, otherwise use a default for development
        const storeId = currentStore?.id || 'demo-store-' + Date.now();
        const pageRepository = new SupabasePageRepository(storeId);
        setRepository(pageRepository);
        // Load existing pages from database
        const pageDocuments = await pageRepository.listPages();
        const loadedPages: Page[] = pageDocuments.map(doc => {
          if (doc.name === 'Site Header' || doc.name === 'Site Footer') {
          }
          const page = {
            id: doc.id,
            name: doc.name,
            slug: doc.slug,  // Don't default to '/' - preserve the actual slug
            template: 'custom', // We could add template info to the schema later
            status: doc.status as 'draft' | 'published',
            createdAt: doc.createdAt,
            isHomePage: doc.slug === '/' || doc.name === 'Home Page',
            isSystemPage: doc.isSystemPage || doc.name === 'Site Header' || doc.name === 'Site Footer',
            systemPageType: doc.systemPageType || 
              (doc.pageType === 'header' ? 'header' as const : 
               doc.pageType === 'footer' ? 'footer' as const :
               doc.name === 'Site Header' ? 'header' as const : 
               doc.name === 'Site Footer' ? 'footer' as const : undefined),
            readOnly: doc.editingRestrictions?.readOnly
          };
          if (page.name === 'Site Header' || page.name === 'Site Footer') {
          }
          return page;
        });
        // Ensure Header and Footer system pages exist
        const hasHeader = loadedPages.some(page => page.systemPageType === 'header' || page.name === 'Site Header');
        const hasFooter = loadedPages.some(page => page.systemPageType === 'footer' || page.name === 'Site Footer');
        if (!hasHeader) {
          try {
            const headerPage = await pageRepository.createSystemPage('header', 'Site Header');
            loadedPages.push({
              id: headerPage.id,
              name: headerPage.name,
              slug: headerPage.slug || '/header',
              template: 'custom',
              status: headerPage.status as 'draft' | 'published',
              createdAt: headerPage.createdAt,
              isHomePage: false,
              isSystemPage: true,
              systemPageType: 'header',
              readOnly: false
            });
          } catch (error: any) {
            if (error?.code === 'P0001' && error?.message?.includes('more than')) {
            } else {
            }
          }
        }
        if (!hasFooter) {
          try {
            const footerPage = await pageRepository.createSystemPage('footer', 'Site Footer');
            loadedPages.push({
              id: footerPage.id,
              name: footerPage.name,
              slug: footerPage.slug || '/footer',
              template: 'custom',
              status: footerPage.status as 'draft' | 'published',
              createdAt: footerPage.createdAt,
              isHomePage: false,
              isSystemPage: true,
              systemPageType: 'footer',
              readOnly: false
            });
          } catch (error: any) {
            if (error?.code === 'P0001' && error?.message?.includes('more than')) {
            } else {
            }
          }
        }
        // Check for duplicate home pages and clean them up
        const homePages = loadedPages.filter(page => page.name === 'Home');
        const homePagePages = loadedPages.filter(page => page.name === 'Home Page');
        if (homePages.length > 0 && currentStore?.id) {
          try {
            const cleanupResult = await cleanupDuplicateHomePagesForStore(currentStore.id);
            if (cleanupResult.removedPages > 0) {
              // Reload pages after cleanup
              const updatedPageDocuments = await pageRepository.listPages();
              const updatedPages: Page[] = updatedPageDocuments.map(doc => ({
                id: doc.id,
                name: doc.name,
                slug: doc.slug,  // Don't default to '/' - preserve the actual slug
                template: 'custom',
                status: doc.status as 'draft' | 'published',
                createdAt: doc.createdAt,
                isHomePage: doc.slug === '/' || doc.name === 'Home Page',
                isSystemPage: doc.isSystemPage,
                systemPageType: doc.systemPageType,
                readOnly: doc.editingRestrictions?.readOnly
              }));
              setPages(updatedPages);
            } else {
              setPages(loadedPages);
            }
          } catch (cleanupError) {
            setPages(loadedPages);
          }
        } else {
          setPages(loadedPages);
        }
        // Check if store needs provisioning
        if (currentStore?.id && authUser?.id) {
          try {
            const provisioningNeeded = await checkProvisioningStatus(currentStore.id);
            if (provisioningNeeded.needsPages || provisioningNeeded.needsPolicies) {
              setProvisioningStatus(provisioningNeeded);
              setShowProvisioningModal(true);
            }
          } catch (provisioningError) {
          }
        }
        // Set initial selected page (home page if exists, or first page)
        const homePage = loadedPages.find(p => p.isHomePage);
        const firstPage = loadedPages[0];
        if (homePage) {
          setSelectedPageId(homePage.id);
        } else if (firstPage) {
          setSelectedPageId(firstPage.id);
        }
      } catch (error) {
        // Determine the type of error and set appropriate state
        let errorMessage = '';
        if (!authUser) {
          errorMessage = 'Authentication required. Please refresh the page.';
        } else if (!currentStore) {
          errorMessage = 'No store found. Please select a store first.';
        } else {
          errorMessage = 'Database connection failed. Running in development mode.';
        }
        setInitError(errorMessage);
        // Still try to set up repository for development mode
        const storeId = currentStore?.id || 'demo-store-' + Date.now();
        try {
          const pageRepository = new SupabasePageRepository(storeId);
          setRepository(pageRepository);
        } catch (repoError) {
          // Create repository anyway - errors will be handled in individual operations
          const pageRepository = new SupabasePageRepository(storeId);
          setRepository(pageRepository);
        }
        // Set empty pages array so the UI shows "Add a Home Page to start"
        setPages([]);
      } finally {
        setIsLoading(false);
      }
    };
    initializeRepository();
  }, [currentStore?.id]);
  // Load customizations when Contents view is accessed
  useEffect(() => {
    if (view === 'contents' && currentStore?.id && !customizations) {
      loadCustomizations();
    }
  }, [view, currentStore?.id, customizations]);
  const createPage = async (template: Template) => {
    if (pageCount >= maxPages) {
      alert(`Maximum of ${maxPages} pages allowed per store.`);
      return;
    }
    if (!repository) {
      alert('Page repository not initialized. Please refresh the page.');
      return;
    }
    try {
      const newPageDoc = await repository.createPage(template.name);
      const newPage: Page = {
        id: newPageDoc.id,
        name: newPageDoc.name,
        slug: template.slug || `/${template.name.toLowerCase().replace(/\s+/g, '-').replace(/&/g, 'and')}`,
        template: template.id,
        status: 'draft',
        createdAt: newPageDoc.createdAt
      };
      setPages([...pages, newPage]);
      setSelectedPageId(newPage.id);
      setShowTemplateSelector(false);
      setView('editor');
    } catch (error) {
      // Provide more specific error messages
      const errorMessage = error instanceof Error ? error.message : String(error);
      if (errorMessage.includes('Page cannot have more than')) {
        alert('You have reached the maximum number of pages (12) for this store.');
      } else if (errorMessage.includes('permission')) {
        alert('Permission denied. Please make sure you are signed in and have access to this store.');
      } else if (errorMessage.includes('network') || errorMessage.includes('fetch')) {
        alert('Network error. Please check your internet connection and try again.');
      } else {
        alert(`Failed to create page: ${errorMessage || 'Unknown error'}. Please try again.`);
      }
    }
  };
  const deletePage = async (pageId: string) => {
    const page = pages.find(p => p.id === pageId);
    if (page?.isHomePage) {
      alert('Cannot delete the home page.');
      return;
    }
    if (!repository) {
      alert('Page repository not initialized');
      return;
    }
    try {
      await repository.deletePage(pageId);
      setPages(pages.filter(p => p.id !== pageId));
      if (selectedPageId === pageId) {
        const remainingPages = pages.filter(p => p.id !== pageId);
        setSelectedPageId(remainingPages[0]?.id || '');
      }
    } catch (error) {
      alert('Failed to delete page. Please try again.');
    }
  };
  const duplicatePage = (pageId: string) => {
    if (pageCount >= maxPages) {
      alert(`Maximum of ${maxPages} pages allowed per store.`);
      return;
    }
    const page = pages.find(p => p.id === pageId);
    if (!page) return;
    const newPage: Page = {
      ...page,
      id: Date.now().toString(),
      name: `${page.name} (Copy)`,
      slug: `${page.slug}-copy`,
      status: 'draft',
      createdAt: new Date().toISOString(),
      isHomePage: false
    };
    setPages([...pages, newPage]);
  };
  const editPage = async (pageId: string) => {
    if (!repository) return;
    try {
      const page = pages.find(p => p.id === pageId);
      // Check if this is a header/footer page
      if (page?.systemPageType === 'header' || page?.systemPageType === 'footer') {
        // For header/footer pages, set them as selected but stay in pages view
        // The HeaderFooterEditor will be rendered instead of the regular editor
        setSelectedPageId(pageId);
        setView('editor');
        return;
      }
      // Regular page - proceed with editing
      setSelectedPageId(pageId);
      setView('editor');
    } catch (error) {
      // Fall back to regular editing if there's an error
      setSelectedPageId(pageId);
      setView('editor');
    }
  };
  const viewSite = () => {
    if (currentStore?.store_slug) {
      const siteUrl = `${window.location.origin}/store/${currentStore.store_slug}`;
      window.open(siteUrl, '_blank');
    } else {
      alert('Store not found. Please refresh the page and try again.');
    }
  };
  const refreshPages = async () => {
    if (!repository) {
      return;
    }
    setRefreshLoading(true);
    try {
      // Reload pages from database
      const pageDocuments = await repository.listPages();
      const loadedPages: Page[] = pageDocuments.map(doc => {
        if (doc.name === 'Site Header' || doc.name === 'Site Footer') {
        }
        const page = {
          id: doc.id,
          name: doc.name,
          slug: doc.slug,
          template: 'custom',
          status: doc.status as 'draft' | 'published',
          createdAt: doc.createdAt,
          isHomePage: doc.slug === '/' || doc.name === 'Home Page',
          isSystemPage: doc.isSystemPage || doc.name === 'Site Header' || doc.name === 'Site Footer',
          systemPageType: doc.systemPageType || 
            (doc.pageType === 'header' ? 'header' as const : 
             doc.pageType === 'footer' ? 'footer' as const :
             doc.name === 'Site Header' ? 'header' as const : 
             doc.name === 'Site Footer' ? 'footer' as const : undefined),
          readOnly: doc.editingRestrictions?.readOnly
        };
        if (page.name === 'Site Header' || page.name === 'Site Footer') {
        }
        return page;
      });
      setPages(loadedPages);
      // If currently selected page no longer exists, clear selection
      if (selectedPageId && !loadedPages.find(p => p.id === selectedPageId)) {
        setSelectedPageId('');
      }
    } catch (error) {
      alert('Failed to refresh pages. Please try again.');
    } finally {
      setRefreshLoading(false);
    }
  };
  const renderPagesList = () => (
    <div className="space-y-4">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-2xl font-semibold text-white">Pages</h2>
          <p className="text-[#A0A0A0] text-sm">
            {isLoading ? 'Loading...' : `${pageCount} of ${maxPages} pages used`}
          </p>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={refreshPages}
            disabled={refreshLoading}
            className="flex items-center gap-2 bg-gray-600 hover:bg-gray-700 disabled:opacity-50 text-white px-3 py-2 rounded-lg transition-colors text-sm"
            title="Refresh pages from database"
          >
            <RefreshCw className={`w-4 h-4 ${refreshLoading ? 'animate-spin' : ''}`} />
            Refresh
          </button>
          {authUser?.email === 'glenn@omnicybersolutions.com' && (
            <button
              onClick={handleUpdateSystemPages}
              className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg transition-colors text-sm"
            >
              <Shield className="w-4 h-4" />
              Fix System Pages
            </button>
          )}
          <button
            onClick={() => setShowTemplateSelector(true)}
            disabled={pageCount >= maxPages}
            className="flex items-center gap-2 bg-[#9B51E0] hover:bg-[#8B45D0] disabled:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors"
          >
            <Plus className="w-4 h-4" />
            New Page
          </button>
        </div>
      </div>
      <div className="bg-[#1E1E1E] rounded-lg p-4 border border-[#3A3A3A] mb-4">
        <div className="flex justify-between items-center mb-2">
          <span className="text-[#A0A0A0] text-sm">Page Limit</span>
          <span className="text-[#A0A0A0] text-sm">{pageCount}/{maxPages}</span>
        </div>
        <div className="w-full bg-[#3A3A3A] rounded-full h-2">
          <div 
            className="bg-[#9B51E0] h-2 rounded-full transition-all duration-300"
            style={{ width: `${(pageCount / maxPages) * 100}%` }}
          />
        </div>
      </div>
      <div className="space-y-2">
        {isLoading ? (
          <div className="flex items-center justify-center py-8">
            <div className="text-[#A0A0A0]">Loading pages...</div>
          </div>
        ) : pages.length === 0 ? (
          <div className="text-center py-12">
            <div className="mb-4">
              <File className="w-12 h-12 text-[#5A5A5A] mx-auto mb-3" />
            </div>
            <p className="text-[#A0A0A0] text-lg font-medium mb-2">Add a Home Page to start</p>
            <p className="text-[#5A5A5A] text-sm mb-4">Create your first page to begin building your site</p>
            {initError && (
              <div className="bg-yellow-900 text-yellow-300 p-3 rounded-lg mb-4 text-sm">
                <p>⚠️ {initError}</p>
              </div>
            )}
            <button
              onClick={() => setShowTemplateSelector(true)}
              className="flex items-center gap-2 bg-[#9B51E0] hover:bg-[#8B45D0] text-white px-4 py-2 rounded-lg transition-colors mx-auto"
            >
              <Plus className="w-4 h-4" />
              Create First Page
            </button>
          </div>
        ) : (
          pages.map((page) => (
            <div
              key={page.id}
            className={`bg-[#1E1E1E] rounded-lg p-4 border transition-colors ${
              selectedPageId === page.id 
                ? 'border-[#9B51E0] bg-[#2A1A3A]' 
                : 'border-[#3A3A3A] hover:border-[#5A5A5A]'
            }`}
          >
            <div className="flex items-center justify-between">
              <div 
                className="flex items-center gap-3 cursor-pointer flex-1"
                onClick={() => setSelectedPageId(page.id)}
              >
                {page.isHomePage ? (
                  <Home className="w-5 h-5 text-[#9B51E0]" />
                ) : page.systemPageType === 'header' ? (
                  <Layout className="w-5 h-5 text-[#FF7F00]" />
                ) : page.systemPageType === 'footer' ? (
                  <Layout className="w-5 h-5 text-[#00BCD4]" />
                ) : (
                  <File className="w-5 h-5 text-[#A0A0A0]" />
                )}
                <div>
                  <div className="flex items-center gap-2">
                    <h3 className="text-white font-medium">{page.name}</h3>
                  </div>
                  <p className="text-[#A0A0A0] text-sm">{page.slug}</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <span className={`px-2 py-1 rounded text-xs ${
                  page.status === 'published' 
                    ? 'bg-green-900 text-green-300' 
                    : 'bg-yellow-900 text-yellow-300'
                }`}>
                  {page.status}
                </span>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      editPage(page.id);
                    }}
                    className="flex items-center gap-1 px-3 py-1 rounded-lg text-sm transition-colors bg-[#9B51E0] hover:bg-[#8B45D0] text-white"
                    title="Edit page"
                  >
                    <Edit3 className="w-3 h-3" />
                    Edit
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      duplicatePage(page.id);
                    }}
                    className="p-1 hover:bg-[#3A3A3A] rounded"
                    title="Duplicate page"
                  >
                    <Copy className="w-4 h-4 text-[#A0A0A0]" />
                  </button>
                {!page.isHomePage && (
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      deletePage(page.id);
                    }}
                    className="p-1 hover:bg-red-900 rounded"
                    title="Delete page"
                  >
                    <Trash2 className="w-4 h-4 text-red-400" />
                  </button>
                )}
              </div>
            </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
  const renderTemplateSelector = () => (
    <div className="space-y-4">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-semibold text-white">Choose Template</h2>
        <button
          onClick={() => setShowTemplateSelector(false)}
          className="text-[#A0A0A0] hover:text-white"
        >
          <ArrowLeft className="w-5 h-5" />
        </button>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {templates.map((template) => (
          <div
            key={template.id}
            onClick={() => createPage(template)}
            className="bg-[#1E1E1E] rounded-lg p-6 border border-[#3A3A3A] hover:border-[#9B51E0] cursor-pointer transition-colors"
          >
            <template.icon className="w-8 h-8 text-[#9B51E0] mb-3" />
            <h3 className="text-white font-medium mb-2">{template.name}</h3>
            <p className="text-[#A0A0A0] text-sm mb-2">{template.description}</p>
            <span className="text-xs text-[#9B51E0]">{template.category}</span>
          </div>
        ))}
      </div>
    </div>
  );
  const renderEditor = () => {
    if (!selectedPage) return null;
    return (
      <div className="h-full flex flex-col">
        {/* Editor Header */}
        <div className="bg-[#1E1E1E] border-b border-[#3A3A3A] px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button
                onClick={() => setView('pages')}
                className="text-[#A0A0A0] hover:text-white transition-colors"
              >
                <ArrowLeft className="w-5 h-5" />
              </button>
              <div>
                <h2 className="text-xl font-semibold text-white">
                  {selectedPage.name}
                </h2>
                <p className="text-[#A0A0A0] text-sm">{selectedPage.slug}</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <button 
                onClick={viewSite}
                className="flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded-lg transition-colors"
              >
                <ExternalLink className="w-4 h-4" />
                View Site
              </button>
              <button className="flex items-center gap-2 bg-[#2A2A2A] hover:bg-[#3A3A3A] text-white px-3 py-2 rounded-lg border border-[#3A3A3A] transition-colors">
                <Eye className="w-4 h-4" />
                Preview
              </button>
              <button className="flex items-center gap-2 bg-[#9B51E0] hover:bg-[#8B45D0] text-white px-3 py-2 rounded-lg transition-colors">
                <Save className="w-4 h-4" />
                Save
              </button>
            </div>
          </div>
        </div>
        {/* Enhanced Page Builder or Header/Footer Editor */}
        <div className="flex-1 min-h-0">
          {(() => {
            return selectedPage.systemPageType === 'header' || selectedPage.systemPageType === 'footer';
          })() ? (
            repository ? (
              <HeaderFooterEditorWrapper 
                page={selectedPage}
                pageRepository={repository}
                onPageUpdate={(updatedPage) => {
                  // Update the selected page in the local state
                  setPages(prev => prev.map(p => p.id === updatedPage.id ? {
                    ...p,
                    name: updatedPage.name,
                    updatedAt: updatedPage.updatedAt
                  } : p));
                }}
              />
            ) : (
              <div className="flex items-center justify-center h-64">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
                <span className="ml-3 text-gray-600">Initializing repository...</span>
              </div>
            )
          ) : (
            <EnhancedPageBuilderWrapper 
              pageId={selectedPage.id}
              pageName={selectedPage.name}
              pageSlug={selectedPage.slug}
            />
          )}
        </div>
      </div>
    );
  };
  // Store Logo Functions
  const handleLogoUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file || !currentStore?.id) return;
    setLogoUploading(true);
    try {
      const fileExt = file.name.split('.').pop();
      const fileName = `${currentStore.id}/store-logo.${fileExt}`;
      const filePath = `store-images/${fileName}`;
      // Upload to Supabase Storage
      const { error: uploadError } = await supabase.storage
        .from('store-images')
        .upload(filePath, file, { upsert: true });
      if (uploadError) throw uploadError;
      // Get public URL
      const { data: { publicUrl } } = supabase.storage
        .from('store-images')
        .getPublicUrl(filePath);
      // Update store with logo URL
      const { error: updateError } = await supabase
        .from('stores')
        .update({ store_logo_url: publicUrl })
        .eq('id', currentStore.id);
      if (updateError) throw updateError;
      // Immediately update local state for instant preview
      setUploadedLogoUrl(publicUrl);
      // Refresh store data and wait for it to complete
      await refreshStores();
      // Verify the store was updated
      setTimeout(() => {
        // If store context has the new URL, sync local state
        if (currentStore?.store_logo_url === publicUrl) {
        } else {
          refreshStores(); // Try one more time
        }
      }, 500);
    } catch (error) {
    } finally {
      setLogoUploading(false);
      // Clear the file input
      event.target.value = '';
    }
  };
  const handleRemoveLogo = async () => {
    if (!currentStore?.id) return;
    try {
      // Remove logo URL from database
      const { error } = await supabase
        .from('stores')
        .update({ store_logo_url: null })
        .eq('id', currentStore.id);
      if (error) throw error;
      // Clear local state immediately
      setUploadedLogoUrl(null);
      // Refresh store data
      await refreshStores();
    } catch (error) {
    }
  };
  const renderStoreLogo = () => (
    <div className="bg-[#1E1E1E] rounded-lg border border-[#3A3A3A] p-6 mb-4">
      <div className="flex items-center gap-2 mb-4">
        <Image className="w-5 h-5 text-purple-400" />
        <h3 className="text-lg font-medium text-white">Store Logo</h3>
      </div>
      <p className="text-gray-400 text-sm mb-4">
        Upload your store logo to use across all pages, headers, and footers
      </p>
      {(uploadedLogoUrl || currentStore?.store_logo_url) ? (
        <div className="space-y-4">
          <div className="flex items-center gap-4">
            <div className="w-16 h-16 bg-white rounded-lg overflow-hidden flex-shrink-0">
              <img 
                src={uploadedLogoUrl || currentStore?.store_logo_url} 
                alt="Store Logo" 
                className="w-full h-full object-contain"
              />
            </div>
            <div className="flex-1">
              <p className="text-white text-sm font-medium">Current Logo</p>
              <p className="text-gray-400 text-xs">Used in headers, footers, and pages</p>
            </div>
            <button
              onClick={handleRemoveLogo}
              className="p-2 text-gray-400 hover:text-red-400 transition-colors"
              title="Remove logo"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
          <div className="pt-4 border-t border-[#3A3A3A]">
            <label className="flex items-center justify-center gap-2 px-4 py-2 bg-purple-600/20 hover:bg-purple-600/30 border border-purple-600/50 text-purple-300 rounded-lg cursor-pointer transition-colors">
              <Upload className="w-4 h-4" />
              Replace Logo
              <input
                type="file"
                onChange={handleLogoUpload}
                accept="image/*"
                className="hidden"
                disabled={logoUploading}
              />
            </label>
          </div>
        </div>
      ) : (
        <label className="flex flex-col items-center justify-center gap-3 p-8 border-2 border-dashed border-[#3A3A3A] rounded-lg cursor-pointer hover:border-purple-600/50 transition-colors">
          <Upload className="w-8 h-8 text-gray-400" />
          <div className="text-center">
            <p className="text-white font-medium">Upload Store Logo</p>
            <p className="text-gray-400 text-sm">JPG, PNG, SVG up to 2MB</p>
          </div>
          <input
            type="file"
            onChange={handleLogoUpload}
            accept="image/*"
            className="hidden"
            disabled={logoUploading}
          />
        </label>
      )}
      {logoUploading && (
        <div className="mt-3 flex items-center gap-2 text-purple-400">
          <RefreshCw className="w-4 h-4 animate-spin" />
          <span className="text-sm">Uploading...</span>
        </div>
      )}
    </div>
  );
  const renderContents = () => (
    <div className="space-y-4">
      {renderStoreLogo()}
      {isLoadingCustomizations ? (
        <div className="bg-[#1E1E1E] rounded-lg border border-[#3A3A3A] p-8 text-center">
          <div className="flex items-center justify-center gap-3 text-[#A0A0A0]">
            <RefreshCw className="w-5 h-5 animate-spin" />
            <span>Loading your store customizations...</span>
          </div>
        </div>
      ) : (
        <>
          <div className="bg-[#1E1E1E] rounded-lg border border-[#3A3A3A] p-6">
            <CustomizationPanel
              currentTemplate={null}
              selectedLayout={null}
              storeName={currentStore?.store_name || 'Your Store'}
              storeSlug={currentStore?.store_slug}
              customizations={customizations}
              onCustomizationsChange={setCustomizations}
            />
          </div>
          {/* Save Actions */}
          <div className="bg-[#1E1E1E] rounded-lg border border-[#3A3A3A] p-6">
            <div className="flex items-center justify-between">
              <div>
                <h4 className="text-white font-semibold mb-1">Save Your Changes</h4>
                <p className="text-sm text-[#A0A0A0]">
                  Save your store customizations including contact information and SEO settings
                </p>
              </div>
              <div className="flex items-center gap-3">
                <button 
                  onClick={viewSite}
                  className="flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  <ExternalLink className="w-4 h-4" />
                  View Site
                </button>
                <button 
                  onClick={saveCustomizations}
                  disabled={isSavingCustomizations}
                  className="flex items-center gap-2 bg-[#9B51E0] hover:bg-[#8B45D0] disabled:bg-[#4A4A4A] disabled:text-[#A0A0A0] text-white px-4 py-2 rounded-lg transition-colors"
                >
                  <Save className="w-4 h-4" />
                  {isSavingCustomizations ? 'Saving...' : 'Save Changes'}
                </button>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
  const renderPolicies = () => (
    <div className="space-y-4">
      <div className="bg-[#1E1E1E] rounded-lg border border-[#3A3A3A] p-6">
        <PolicySettings storeId={currentStore?.id || ''} />
      </div>
    </div>
  );
  const handleUpdateSystemPages = async () => {
    setShowSystemPagesFixModal(true);
  };
  const loadCustomizations = async () => {
    if (!currentStore?.id) {
      return;
    }
    setIsLoadingCustomizations(true);
    try {
      // Load store information (basic fields from stores table)
      const { data: storeData, error: storeError } = await supabase
        .from('stores')
        .select('store_phone, store_address_line1, store_address_line2, store_city, store_state, store_postal_code, description, store_name')
        .eq('id', currentStore.id)
        .single();
      if (storeError) {
        throw storeError;
      }
      // Load detailed customizations from store_templates.customizations JSONB field
      let customizationsData = null;
      try {
        const { data, error: templatesError } = await supabase
          .from('store_templates')
          .select('customizations')
          .eq('store_id', currentStore.id)
          .eq('is_active', true)
          .single();
        if (templatesError) {
          if (templatesError.message.includes('No rows')) {
            // No store template exists yet - use default values
          } else {
            // Other error occurred
          }
        } else if (data?.customizations) {
          // Extract email and social from customizations JSONB
          const customizations = data.customizations;
          customizationsData = {
            contact_email: customizations.contact?.email || null,
            social_facebook: customizations.social?.facebook || null,
            social_twitter: customizations.social?.twitter || null,
            social_instagram: customizations.social?.instagram || null,
            social_tiktok: customizations.social?.tiktok || null
          };
        }
      } catch (error) {
      }
      if (storeData) {
        // Combine address components into single address string
        const addressParts = [
          storeData.store_address_line1,
          storeData.store_address_line2,
          storeData.store_city,
          storeData.store_state,
          storeData.store_postal_code
        ].filter(Boolean);
        const fullAddress = addressParts.join(', ');
        // Create customizations object from both data sources
        const loadedCustomizations = {
          contact: {
            phone: storeData.store_phone || '',
            email: customizationsData?.contact_email || '',
            address: fullAddress,
            socialLinks: {
              facebook: customizationsData?.social_facebook || '',
              twitter: customizationsData?.social_twitter || '',
              instagram: customizationsData?.social_instagram || '',
              tiktok: customizationsData?.social_tiktok || ''
            }
          },
          seo: {
            title: `${storeData.store_name} - Quality Products Online`,
            description: storeData.description || `Shop the best products at ${storeData.store_name}. Fast shipping, secure checkout, and excellent customer service.`,
            keywords: ['online store', 'quality products', 'fast shipping']
          }
        };
        setCustomizations(loadedCustomizations);
      }
    } catch (error) {
      // Set default customizations if loading fails
      const defaultCustomizations = {
        contact: {
          phone: '',
          email: '',
          address: '',
          socialLinks: {
            facebook: '',
            twitter: '',
            instagram: '',
            tiktok: ''
          }
        },
        seo: {
          title: `${currentStore?.store_name || 'Your Store'} - Quality Products Online`,
          description: `Shop the best products at ${currentStore?.store_name || 'Your Store'}. Fast shipping, secure checkout, and excellent customer service.`,
          keywords: ['online store', 'quality products', 'fast shipping']
        }
      };
      setCustomizations(defaultCustomizations);
    } finally {
      setIsLoadingCustomizations(false);
    }
  };
  const saveCustomizations = async () => {
    if (!currentStore?.id) {
      alert('❌ Store not found. Please refresh the page and try again.');
      return;
    }
    // Use empty customizations if not set
    const currentCustomizations = customizations || {
      contact: { phone: '', email: '', address: '', socialLinks: { facebook: '', twitter: '', instagram: '', tiktok: '' } },
      seo: { title: '', description: '', keywords: [] }
    };
    setIsSavingCustomizations(true);
    try {
      // Extract contact and SEO information from customizations
      const { contact, seo } = currentCustomizations;
      // 1. Update store table with basic fields
      const storeUpdates: any = {};
      let hasStoreUpdates = false;
      // Phone number (exists as store_phone)
      if (contact?.phone?.trim()) {
        storeUpdates.store_phone = contact.phone.trim();
        hasStoreUpdates = true;
      }
      // Address - store in address_line1
      if (contact?.address?.trim()) {
        storeUpdates.store_address_line1 = contact.address.trim();
        hasStoreUpdates = true;
      }
      // Basic description (exists as 'description')  
      if (seo?.description?.trim()) {
        storeUpdates.description = seo.description.trim();
        hasStoreUpdates = true;
      }
      // Update stores table if needed
      if (hasStoreUpdates) {
        storeUpdates.updated_at = new Date().toISOString();
        const { error: storeError } = await supabase
          .from('stores')
          .update(storeUpdates)
          .eq('id', currentStore.id);
        if (storeError) {
          throw new Error(`Store update error: ${storeError.message}`);
        }
      }
      // 2. Update store_templates.customizations JSONB with email and social
      const customizationUpdates = {
        contact: {
          email: contact?.email?.trim() || null
        },
        social: {
          facebook: contact?.socialLinks?.facebook?.trim() || null,
          twitter: contact?.socialLinks?.twitter?.trim() || null,
          instagram: contact?.socialLinks?.instagram?.trim() || null,
          tiktok: contact?.socialLinks?.tiktok?.trim() || null
        }
      };
      try {
        // Check if store template exists
        const { data: existingTemplate, error: checkError } = await supabase
          .from('store_templates')
          .select('id, customizations')
          .eq('store_id', currentStore.id)
          .eq('is_active', true)
          .single();
        if (existingTemplate) {
          // Merge new customizations with existing ones
          const mergedCustomizations = {
            ...existingTemplate.customizations,
            contact: {
              ...existingTemplate.customizations?.contact,
              ...customizationUpdates.contact
            },
            social: {
              ...existingTemplate.customizations?.social,
              ...customizationUpdates.social
            }
          };
          const { error: updateError } = await supabase
            .from('store_templates')
            .update({ 
              customizations: mergedCustomizations,
              updated_at: new Date().toISOString()
            })
            .eq('store_id', currentStore.id)
            .eq('is_active', true);
          if (updateError) {
            throw new Error(`Template update error: ${updateError.message}`);
          }
        } else {
          // Create new store template with customizations
          const { error: insertError } = await supabase
            .from('store_templates')
            .insert({
              store_id: currentStore.id,
              layout_id: 'modern',
              color_scheme_id: 'default',
              customizations: customizationUpdates,
              is_active: true,
              preview_mode: false
            });
          if (insertError) {
            throw new Error(`Template insert error: ${insertError.message}`);
          }
        }
      } catch (customizationError: any) {
        // Don't fail completely - at least basic store info was saved
      }
      alert('✅ Your store customizations have been saved successfully!');
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      // Provide user-friendly error messages
      if (errorMessage.includes('permission') || errorMessage.includes('RLS')) {
        alert('❌ Permission denied. Please make sure you are signed in and have access to this store.');
      } else if (errorMessage.includes('network') || errorMessage.includes('fetch')) {
        alert('❌ Network error. Please check your internet connection and try again.');
      } else if (errorMessage.includes('relation') || errorMessage.includes('does not exist')) {
        alert('❌ Database table missing. Please contact support to set up your store customizations.');
      } else {
        alert(`❌ Failed to save customizations: ${errorMessage}`);
      }
    } finally {
      setIsSavingCustomizations(false);
    }
  };
  const handleSystemPagesFix = async () => {
    if (!currentStore?.id) {
      return {
        success: false,
        message: 'Store not found',
        updatedPages: 0,
        errors: ['Store not found']
      };
    }
    try {
      // First run the enhanced recreateMissingSystemPages which now handles publishing core pages
      const result = await recreateMissingSystemPages(currentStore.id);
      // Also run the dedicated publishCoreSystemPages function for extra assurance
      const publishResult = await publishCoreSystemPages(currentStore.id);
      // Combine results
      const combinedResult = {
        success: result.success && publishResult.success,
        message: [result.message, publishResult.message].filter(m => m && !m.includes('already')).join('. '),
        updatedPages: result.updatedPages + publishResult.updatedPages,
        errors: [...result.errors, ...publishResult.errors]
      };
      // Refresh the pages list if successful
      if (combinedResult.success && repository) {
        const updatedPageDocuments = await repository.listPages();
        const updatedPages: Page[] = updatedPageDocuments.map(doc => ({
          id: doc.id,
          name: doc.name,
          slug: doc.slug,  // Don't default to '/' - preserve the actual slug
          template: 'custom',
          status: doc.status as 'draft' | 'published',
          createdAt: doc.createdAt,
          isHomePage: doc.slug === '/' || doc.name === 'Home Page',
          isSystemPage: doc.isSystemPage,
          systemPageType: doc.systemPageType,
          readOnly: doc.editingRestrictions?.readOnly
        }));
        setPages(updatedPages);
      }
      return combinedResult;
    } catch (error) {
      return {
        success: false,
        message: `Failed to update system pages: ${error instanceof Error ? error.message : 'Unknown error'}`,
        updatedPages: 0,
        errors: [error instanceof Error ? error.message : 'Unknown error']
      };
    }
  };
  const handleRecreateAboutUs = async () => {
    if (!authUser?.email) {
      alert('User email not found');
      return;
    }
    try {
      const result = await recreateAboutUsPageByEmail(authUser.email);
      if (result.success) {
        alert(`✅ ${result.message}`);
        // Refresh the pages list
        if (repository) {
          const updatedPageDocuments = await repository.listPages();
          const updatedPages: Page[] = updatedPageDocuments.map(doc => ({
            id: doc.id,
            name: doc.name,
            slug: doc.slug,  // Don't default to '/' - preserve the actual slug
            template: 'custom',
            status: doc.status as 'draft' | 'published',
            createdAt: doc.createdAt,
            isHomePage: doc.slug === '/' || doc.name === 'Home Page'
          }));
          setPages(updatedPages);
        }
      } else {
        alert(`❌ ${result.message}`);
      }
    } catch (error) {
      alert(`Failed to recreate About Us page: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };
  const handleProvision = async () => {
    if (!currentStore?.id || !authUser?.id) {
      return { success: false, message: 'Store or user not found' };
    }
    try {
      await provisionCurrentStore({
        storeId: currentStore.id,
        storeName: currentStore.store_name,
        storeSlug: currentStore.store_slug
      });
      // Refresh pages list after provisioning
      const pageDocuments = await repository?.listPages() || [];
      const loadedPages: Page[] = pageDocuments.map(doc => ({
        id: doc.id,
        name: doc.name,
        slug: doc.slug,  // Don't default to '/' - preserve the actual slug
        template: 'custom',
        status: doc.status as 'draft' | 'published',
        createdAt: doc.createdAt,
        isHomePage: doc.slug === '/' || doc.name === 'Home Page'
      }));
      setPages(loadedPages);
      return { success: true, message: 'Store setup completed successfully! Your essential pages and policies have been created.' };
    } catch (error) {
      return { success: false, message: `Setup failed: ${error instanceof Error ? error.message : 'Unknown error'}` };
    }
  };
  return (
    <div className="min-h-screen bg-[#0A0A0A] text-white">
      <div className="border-b border-[#3A3A3A] bg-[#1E1E1E]">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <h1 className="text-xl font-semibold text-white">Visual Page Builder</h1>
            </div>
            <div className="flex items-center gap-3">
              {/* View Site Button */}
              <button
                onClick={viewSite}
                className="flex items-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors font-medium"
                title={`View live site: ${currentStore?.store_slug ? `/store/${currentStore.store_slug}` : 'Store not loaded'}`}
              >
                <ExternalLink className="w-4 h-4" />
                View Site
              </button>
              {/* Navigation Tabs */}
              <nav className="flex items-center gap-1">
                {[
                  { id: 'pages', label: 'Pages', icon: File },
                  { id: 'contents', label: 'Contents', icon: Layout },
                  { id: 'policies', label: 'AI Content', icon: FileText }
                ].map(({ id, label, icon: Icon }) => (
                  <button
                    key={id}
                    onClick={() => setView(id as any)}
                    className={`flex items-center gap-2 px-3 py-2 rounded-lg transition-colors ${
                      view === id 
                        ? 'bg-[#9B51E0] text-white' 
                        : 'text-[#A0A0A0] hover:text-white hover:bg-[#2A2A2A]'
                    }`}
                  >
                    <Icon className="w-4 h-4" />
                    {label}
                  </button>
                ))}
              </nav>
            </div>
          </div>
        </div>
      </div>
      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="bg-[#2A2A2A] rounded-lg border border-[#3A3A3A] p-6">
          {showTemplateSelector && renderTemplateSelector()}
          {!showTemplateSelector && view === 'pages' && renderPagesList()}
          {!showTemplateSelector && view === 'contents' && renderContents()}
          {!showTemplateSelector && view === 'policies' && renderPolicies()}
          {!showTemplateSelector && view === 'editor' && renderEditor()}
        </div>
      </div>
      {/* Professional Modals */}
      {showSystemPageModal && systemPageInfo && (
        <SystemPageModal
          isOpen={showSystemPageModal}
          onClose={() => {
            setShowSystemPageModal(false);
            setSystemPageInfo(null);
          }}
          pageType={systemPageInfo.type}
          pageName={systemPageInfo.name}
        />
      )}
      {showProvisioningModal && provisioningStatus && currentStore && (
        <ProvisioningModal
          isOpen={showProvisioningModal}
          onClose={() => {
            setShowProvisioningModal(false);
            setProvisioningStatus(null);
          }}
          onProvision={handleProvision}
          storeName={currentStore.store_name}
          needsProvisioning={provisioningStatus}
        />
      )}
      {showSystemPagesFixModal && (
        <SystemPagesFixModal
          isOpen={showSystemPagesFixModal}
          onClose={() => setShowSystemPagesFixModal(false)}
          onFix={handleSystemPagesFix}
        />
      )}
    </div>
  );
};
export default VisualPageBuilder;