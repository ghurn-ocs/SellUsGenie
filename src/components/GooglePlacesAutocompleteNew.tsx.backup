import React, { useRef, useEffect, useState } from 'react'
import { MapPin, Loader2 } from 'lucide-react'

interface AddressComponents {
  address1: string
  address2: string
  city: string
  state: string
  postalCode: string
  country: string
}

interface GooglePlacesAutocompleteProps {
  onAddressSelect: (addressComponents: AddressComponents) => void
  placeholder?: string
  className?: string
  disabled?: boolean
  initialValue?: string
}

export const GooglePlacesAutocomplete: React.FC<GooglePlacesAutocompleteProps> = ({
  onAddressSelect,
  placeholder = "Start typing an address...",
  className = "",
  disabled = false,
  initialValue = ""
}) => {
  const containerRef = useRef<HTMLDivElement>(null)
  const autocompleteElementRef = useRef<google.maps.places.PlaceAutocompleteElement | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [inputValue, setInputValue] = useState(initialValue)

  useEffect(() => {
    // Check if Google Maps is loaded
    if (!window.google || !window.google.maps || !window.google.maps.places) {
      console.error('Google Maps JavaScript API not loaded')
      return
    }

    if (!containerRef.current) return

    try {
      // Try to create the new PlaceAutocompleteElement
      const placeAutocomplete = new google.maps.places.PlaceAutocompleteElement({
        types: ['address']
        // Note: fields are automatically included in the new API
      })

      // Set placeholder text
      placeAutocomplete.setAttribute('placeholder', placeholder)
      
      // Apply custom styling to match our design
      placeAutocomplete.style.width = '100%'
      placeAutocomplete.style.paddingLeft = '2.5rem' // Space for map pin icon
      placeAutocomplete.style.paddingRight = '2.5rem' // Space for loading icon
      placeAutocomplete.style.paddingTop = '0.5rem'
      placeAutocomplete.style.paddingBottom = '0.5rem'
      placeAutocomplete.style.border = '1px solid #3A3A3A'
      placeAutocomplete.style.borderRadius = '0.5rem'
      placeAutocomplete.style.backgroundColor = '#1E1E1E'
      placeAutocomplete.style.color = 'white'
      placeAutocomplete.style.fontSize = '1rem'
      placeAutocomplete.style.outline = 'none'

      // Focus styles
      placeAutocomplete.addEventListener('focus', () => {
        placeAutocomplete.style.borderColor = '#9B51E0'
        placeAutocomplete.style.boxShadow = '0 0 0 2px rgba(155, 81, 224, 0.5)'
      })

      placeAutocomplete.addEventListener('blur', () => {
        placeAutocomplete.style.borderColor = '#3A3A3A'
        placeAutocomplete.style.boxShadow = 'none'
      })

      // Handle place selection
      const handlePlaceSelect = (event: any) => {
        const place = event.target.place
        if (!place || !place.address_components) {
          console.warn('Place data not available:', place)
          return
        }

        setIsLoading(true)

        try {
          // Parse address components
          const addressComponents = parseAddressComponents(place.address_components)
          
          // Update input value to formatted address
          setInputValue(place.formatted_address || '')
          
          // Call the callback with parsed components
          onAddressSelect(addressComponents)
        } catch (error) {
          console.error('Error parsing place data:', error)
        } finally {
          setIsLoading(false)
        }
      }

      placeAutocomplete.addEventListener('gmp-placeselect', handlePlaceSelect)

      // Append to container
      containerRef.current.appendChild(placeAutocomplete)
      autocompleteElementRef.current = placeAutocomplete

      // Set initial value if provided
      if (initialValue) {
        placeAutocomplete.value = initialValue
      }

      // Cleanup
      return () => {
        if (autocompleteElementRef.current && containerRef.current) {
          containerRef.current.removeChild(autocompleteElementRef.current)
        }
      }
    } catch (error) {
      console.error('PlaceAutocompleteElement failed, falling back to input:', error)
      
      // Fallback: create a simple input if the new API fails
      const fallbackInput = document.createElement('input')
      fallbackInput.type = 'text'
      fallbackInput.placeholder = placeholder
      fallbackInput.style.width = '100%'
      fallbackInput.style.paddingLeft = '2.5rem'
      fallbackInput.style.paddingRight = '2.5rem'
      fallbackInput.style.paddingTop = '0.5rem'
      fallbackInput.style.paddingBottom = '0.5rem'
      fallbackInput.style.border = '1px solid #3A3A3A'
      fallbackInput.style.borderRadius = '0.5rem'
      fallbackInput.style.backgroundColor = '#1E1E1E'
      fallbackInput.style.color = 'white'
      fallbackInput.style.fontSize = '1rem'
      fallbackInput.style.outline = 'none'
      
      if (initialValue) {
        fallbackInput.value = initialValue
      }
      
      containerRef.current.appendChild(fallbackInput)
      
      // Cleanup for fallback
      return () => {
        if (fallbackInput && containerRef.current) {
          containerRef.current.removeChild(fallbackInput)
        }
      }
    }
  }, [onAddressSelect, placeholder, initialValue])

  const parseAddressComponents = (
    components: google.maps.GeocoderAddressComponent[]
  ): AddressComponents => {
    const result: AddressComponents = {
      address1: '',
      address2: '',
      city: '',
      state: '',
      postalCode: '',
      country: ''
    }

    components.forEach((component) => {
      const types = component.types
      const value = component.long_name

      if (types.includes('street_number')) {
        result.address1 = value + ' ' + result.address1
      } else if (types.includes('route')) {
        result.address1 += value
      } else if (types.includes('subpremise')) {
        result.address2 = value
      } else if (types.includes('locality')) {
        result.city = value
      } else if (types.includes('administrative_area_level_1')) {
        result.state = component.short_name // Use short name for state (e.g., "CA" instead of "California")
      } else if (types.includes('postal_code')) {
        result.postalCode = value
      } else if (types.includes('country')) {
        result.country = component.short_name // Use short name for country (e.g., "US" instead of "United States")
      }
    })

    // Clean up address1 (remove leading/trailing spaces)
    result.address1 = result.address1.trim()

    return result
  }

  return (
    <div className="relative">
      <div className="relative">
        {/* Container for PlaceAutocompleteElement */}
        <div ref={containerRef} className={`relative ${className}`} />
        
        {/* Map pin icon */}
        <div className="absolute left-3 top-1/2 transform -translate-y-1/2 pointer-events-none z-10">
          <MapPin className="w-4 h-4 text-[#A0A0A0]" />
        </div>
        
        {/* Loading indicator */}
        {isLoading && (
          <div className="absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none z-10">
            <Loader2 className="w-4 h-4 text-[#9B51E0] animate-spin" />
          </div>
        )}
      </div>
      
      {/* Help text */}
      <p className="mt-1 text-xs text-[#A0A0A0]">
        Start typing to search for addresses worldwide
      </p>
    </div>
  )
}

// Hook to load Google Maps script
export const useGoogleMapsScript = (apiKey: string) => {
  const [isLoaded, setIsLoaded] = useState(false)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    // Check if script is already loaded
    if (window.google && window.google.maps && window.google.maps.places) {
      setIsLoaded(true)
      return
    }

    // Check if script is already being loaded
    if (document.querySelector('script[data-google-maps-script]')) {
      // Wait for existing script to load
      const checkLoaded = setInterval(() => {
        if (window.google && window.google.maps && window.google.maps.places) {
          setIsLoaded(true)
          clearInterval(checkLoaded)
        }
      }, 100)
      return () => clearInterval(checkLoaded)
    }

    // Load the script with required parameters for new Places API
    const script = document.createElement('script')
    script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&loading=async`
    script.async = true
    script.defer = true
    script.setAttribute('data-google-maps-script', 'true')
    
    script.onload = () => {
      setIsLoaded(true)
    }
    
    script.onerror = () => {
      setError('Failed to load Google Maps API')
    }
    
    document.head.appendChild(script)

    return () => {
      // Note: We don't remove the script as it might be used by other components
    }
  }, [apiKey])

  return { isLoaded, error }
}